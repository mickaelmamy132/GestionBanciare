/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package gestion_bancaire2;

import java.awt.List;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
//import java.util.List;

/**
 *
 * @author mickael
 */
public class TableBanque extends javax.swing.JInternalFrame {

    /**
     * Creates new form TableBanque
     */
    Connection conn;
    PreparedStatement st;
    ResultSet resultat;
    
    public TableBanque() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI ui=(BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        voir_benefice(); 
        //creerHistogramme();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void voir_benefice()
    {
        //int Compteur = 0;
        try
        {
        DefaultTableModel banque = (DefaultTableModel) Table_Banque.getModel();
        banque.setRowCount(0);
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/banque","root","");
        st = conn.prepareStatement("SELECT montant_preté FROM PRETER");
        resultat = st.executeQuery();
        
        // Calculer le bénéfice accumulé
            double beneficeTotal = 0;
             Vector v2 = new Vector();
            while (resultat.next()) 
            {
                
                int montantPreté = resultat.getInt("montant_preté");
                double beneficePret = montantPreté * 0.1; // Calculer 10% du montant prêté
                beneficeTotal += beneficePret;
                
                
           }
            v2.add(beneficeTotal);
            banque.addRow(v2);
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    
    
    /*
     private void creerHistogramme() {
        // Données factices pour les virements et les prêts
        List<Integer> montantsVirement = new ArrayList<>();
        montantsVirement.add(2000);
        montantsVirement.add(3000);
        montantsVirement.add(4000);

        List<Integer> montantsPret = new ArrayList<>();
        montantsPret.add(5000);
        montantsPret.add(6000);
        montantsPret.add(7000);

        // Créer le dataset pour les données
        DefaultStatisticalCategoryDataset dataset = new DefaultStatisticalCategoryDataset();

        // Ajouter les données de virements au dataset
        for (int i = 0; i < montantsVirement.size(); i++) {
            dataset.add(montantsVirement.get(i), 0, "Virement " + (i+1), "Virement " + (i+1));
        }

        // Ajouter les données de prêts au dataset
        for (int i = 0; i < montantsPret.size(); i++) {
            dataset.add(montantsPret.get(i), 0, "Prêt " + (i+1), "Prêt " + (i+1));
        }

        // Créer le graphique à barres
        JFreeChart chart = ChartFactory.createHistogram(
                "Histogramme des virements et des prêts",
                null,
                null,
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // Personnaliser l'apparence du graphique
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        XYBarRenderer renderer = (XYBarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setSeriesPaint(1, Color.RED);

        // Créer le panneau de graphique et l'ajouter à la fenêtre
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 400));
        getContentPane().add(chartPanel);
    }

    // Reste du code de la classe...

    // Variables declaration - do not modify                     
    private javax.swing.JTable Table_Banque;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel title;
    // End of variables declaration                   
}*/
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Banque = new javax.swing.JTable();
        title = new javax.swing.JLabel();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(806, 444));

        Table_Banque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "benefice accumuler par la banque par chaque prêt"
            }
        ));
        jScrollPane1.setViewportView(Table_Banque);

        title.setBackground(new java.awt.Color(255, 0, 102));
        title.setFont(new java.awt.Font("Segoe UI", 3, 48)); // NOI18N
        title.setText("la banque");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(264, 264, 264))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(178, 178, 178))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(title)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(225, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table_Banque;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
